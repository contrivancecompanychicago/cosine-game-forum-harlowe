
/*** Debug mode ***/
$zindex: 999999;

.dom-debug-mode {
	/*
		CSS preview
	*/
	tw-story, tw-passage, tw-sidebar, tw-include, tw-hook, tw-expression, tw-link, tw-dialog, tw-columns, tw-column, tw-align {
		$cssPreviewColour: hsl(320,80%,80%);
		$cssPreviewColour2: hsl(30,100%,80%);
		outline: 1px solid $cssPreviewColour;
		min-height:32px;
		display:block !important;
		&::before {
			position:absolute;
			top:0;
			left:0;
			height:16px;
			background-color: $cssPreviewColour;
			color:black;
			font-size:16px;
			font-weight:normal;
			font-style:normal;
			font-family:monospace;
			display:inline-block;
			line-height:100%;
			white-space:pre;
			z-index: $zindex - 2;
		}
		&:hover {
			outline: 1px solid  $cssPreviewColour2;
			&::before {
				background-color: $cssPreviewColour2;
				transition: background-color 1s;
			}
		}
	}
	tw-passage, tw-include, tw-hook, tw-expression, tw-link, tw-dialog, tw-columns, tw-column, tw-align {
		padding:1em;
		margin:0;
	}
	tw-story::before {
		content: "<tw-story tags=\"" attr(tags) "\">";
	}
	tw-passage::before {
		top:-16px;
		content: "<tw-passage tags=\"" attr(tags) "\">";
	}
	tw-sidebar::before {
		top:-16px;
		content: "<tw-sidebar>";
	}
	tw-hook::before {
		content: "<tw-hook name=\"" attr(name) "\">";
	}
	tw-expression {
		&::before {
			content: "<tw-expression name=\"" attr(name) "\">";
		}
	}
	tw-link::before {
		content: "<tw-link name=\"" attr(name) "\">";
	}
	tw-dialog::before {
		content: "<tw-dialog>";
	}
	tw-columns::before {
		content: "<tw-columns>";
	}
	tw-column::before {
		content: "<tw-column>";
	}
	tw-align::before {
		content: "<tw-align>";
	}
	tw-include::before {
		content: "<tw-include type=\"" attr(type) "\" title=\"" attr(title) "\">";
	}
}

.debug-mode {
	@mixin tiny-annotation() {
		font-size: 0.8rem;
		padding-left: 0.2rem;
		padding-right: 0.2rem;
		vertical-align: top;
	}

	tw-expression {
		display:inline-block !important;
		
		&[type=variable] {
			&::after {
				@include tiny-annotation();
				content: "$" attr(name)
			}
		}
		&[type=tempVariable] {
			&::after {
				@include tiny-annotation();
				content: "_" attr(name)
			}
		}
		/* Colours for macro return types. These are hand-copied from typecolours.js, with different alpha */
		&[return=boolean]    { background-color:hsla(0,0%,70%,0.2) }
		&[return=array]      { background-color:hsla(0,100%,70%,0.2) }
		&[return=dataset]    { background-color:hsla(30,100%,50%,0.2) }
		&[return=number]     { background-color:hsla(30,100%,70%,0.2) }
		&[return=datamap]    { background-color:hsla(60,100%,70%,0.2) }
		&[return=changer]    { background-color:hsla(90,100%,70%,0.2) }
		&[return=lambda]     { background-color:hsla(120,100%,70%,0.2) }
		&[return=hookname]   { background-color:hsla(160,100%,70%,0.2) }
		&[return=string]     { background-color:hsla(180,100%,70%,0.2) }
		&[return=datatype]   { background-color:hsla(220,100%,70%,0.2) }
		&[return=gradient],
		&[return=colour]     { background-color:hsla(280,100%,70%,0.2) }
		&[return=instant],
		&[return=macro]      { background-color:hsla(320,80%,70%,0.2) }
		&[return=command]    { background-color:hsla(240,100%,80%,0.2) }

		/* False hooks have a special colour */
		&.false {
			background-color: hsla(0,100%,50%,0.2) !important;
		}

		/* Show the macro call */
		&[type=macro]::before {
			content: "(" attr(name) ":)";
			padding: 0 0.5rem;
			font-size: 1rem;
			vertical-align: middle;
			line-height: normal;
			background-color:  inherit;
			border: 1px solid rgba(255,255,255,0.5);
		}
	}

	/* Colours for other things */
	tw-hook {
		background-color: hsla(220,100%,50%,0.1) !important;
		
		/*
			Show the hook syntax. This should line up with what Harlowe expects.
			
			But, of course, anonymous hooks shouldn't be highlighted like this.
		*/
		&::before {
			@include tiny-annotation();
			content: "["
		}
		&::after {
			@include tiny-annotation();
			content: "]"
		}
		&[name] {
			/* Show the IDs of named hooks */
			&::after {
				@include tiny-annotation();
				content: "]<" attr(name) "|"
			}
		}
	}
	tw-pseudo-hook {
		background-color: hsla(40,100%,50%,0.1) !important;
	}
	tw-collapsed {
		&::before {
			@include tiny-annotation();
			content: "{"
		}
		&::after {
			@include tiny-annotation();
			content: "}"
		}
	}
	tw-verbatim {
		&::before, &::after {
			@include tiny-annotation();
			content: "`"
		}
	}
	tw-align {
		&[style*="text-align: center"] {
			background: linear-gradient(to right, hsla(14,100%,87%,0) 0%, hsla(14,100%,87%,0.25) 50%, hsla(14,100%,87%,0) 100%);
		}
		&[style*="text-align: left"] {
			background: linear-gradient(to right, hsla(14,100%,87%,0.25) 0%, hsla(14,100%,87%,0) 100%);
		}
		&[style*="text-align: right"] {
			background: linear-gradient(to right, hsla(14,100%,87%, 0) 0%, hsla(14,100%,87%,0.25) 100%);
		}
	}
	tw-column {
		background-color: hsla(204, 99%, 87%, 0.2);
	}
	
	tw-enchantment {
		animation: enchantment 0.5s infinite;
		-webkit-animation: enchantment 0.5s infinite;
		border: 1px solid;
	}
	
	/* Show destinations of links */
	tw-link::after,
	tw-broken-link::after {
		@include tiny-annotation();
		content: attr(passage-name);
	}
	
	tw-include {
		background-color: hsla(30,60%,50%,0.1);
		&::before {
			@include tiny-annotation();
			content: attr(type) " \"" attr(title) "\"";
		}
	}
}

@keyframes enchantment {
	0%,to { border-color: hsl( 30,100%,70%) }
	50%   { border-color: hsl(160,100%,70%) }
}
@-webkit-keyframes enchantment {
	0%,to { border-color: hsl( 30,100%,70%); }
	50%   { border-color: hsl(160,100%,70%); }
}

$borderwidth: 2px;
$borderradius: 0.5em;
$background: white;
$color: black;

tw-debugger {
	// Dimensions and position
	position:fixed;
	box-sizing:border-box;
	bottom:0;
	right:0;
	z-index: $zindex;
	min-width: 10em;
	min-height: 1em;
	padding: 0em 0.5em 0.5em 1em;

	// Font
	font-size: 1.25em;
	font-family: sans-serif;
	color: $color;

	// Design
	border: {
		left: solid #000 $borderwidth;
		top: solid #000 $borderwidth;
		top-left-radius: $borderradius;
	}
	background: $background;
	opacity: 1;

	// Components
	select {
		margin-right: 1em;
		width: 12em;
	}
	button {
		border-radius: 3px;
		border: solid #999 1px;
		margin: auto 4px;
		background-color: #fff;
		font-size: inherit;
		color: $color;
		&.enabled {
			background-color: #eee;
			box-shadow: inset #ddd 3px 5px 0.5em;
		}
	}
	.panel {
		@include flexbox;
		@include flex-direction(column);

		// Dimensions and position
		position:absolute;
		bottom:100%;
		left:-$borderwidth;
		right: 0;
		padding:1em;
		max-height:40vh;
		overflow-y: scroll;
		overflow-x: hidden;
		z-index:$zindex - 1;

		// Design
		background:$background;
		border:inherit;
		border-bottom: solid #999 $borderwidth;
		border-top-left-radius: $borderradius;
		border-bottom-left-radius: $borderradius;

		// Font
		font-size:0.8em;

		// Hide when empty or hidden
		&:empty, &[hidden] {
			display:none;
		}
	}
	.panel-source, .panel-row-source {
		font-family:monospace;
		overflow-x:scroll;
		white-space:pre;
		@include flex-basis(100%);
	}
	.panel-row-source {
		margin: 5px 0;
	}
	@mixin emptyMsg {
		font-style:italic;
		color:#888;
		text-align:center;
	}
	.panel-rows {
		width:100%;
		overflow-x:scroll;
		> * {
			display:table-row;
		}
		// nth-of=type() is necessary, as there are interstitial rows (<tr> instead of <div>) that represent
		// the (source:) of the previous row, which should be ignored with respect to row colouring.
		> div:nth-of-type(2n) {
			background:#EEE;
		}
	}
	.panel-row-buttons {
		text-align: right;
	}
	.panel-variables .panel-rows:empty::before {
		content:"~ No variables ~";
		@include emptyMsg();
	}
	.panel-enchantments .panel-rows:empty::before {
		content:"~ No enchantments ~";
		@include emptyMsg();
	}
	.panel-errors .panel-rows:empty::before {
		content:"~ No errors... for now. ~";
		@include emptyMsg();
	}
	.panel-rows:empty + .panel-variables-bottom {
		display:none;
	}
	.panel-variables-bottom {
		padding-top:5px;
	}
	.enchantment-row {
		min-height:1.5em;
	}
	.variable-path {
		opacity:0.4;
	}
	.temporary-variable-scope {
		font-family:sans-serif;
		font-weight:normal;
		opacity:0.8;
		font-size:0.75em;
		&:not(:empty)::before {
			content: " in ";
		}
	}
	.variable-name, .enchantment-name {
		font-family:monospace;
		font-weight:bold;
	}
	.variable-type {
		color:#444;
		font-weight:normal;
	}
	.error-row {
		display:table-row;
		background-color: hsla(312, 72%, 65%, 0.3);
		&:nth-of-type(2n) {
			background-color: hsla(312, 72%, 75%, 0.3);
		}
		> * {
			display:table-cell;
			padding: 0.25em 0.5em;
		}
		.error-message {
			cursor: help;
		}
		.error-passage {
			color:#444;
		}
	}
	.storylet-row {
		background-color: hsla(160, 42%, 85%, 0.3);
		&:nth-child(2n) {
			background-color: hsla(160, 42%, 65%, 0.3);
		}
		&.storylet-closed {
			font-style: italic;
			opacity: 0.4;
			background-color: hsla(160, 0%, 85%, 0.3);
			&:nth-child(2n) {
				background-color: hsla(160, 0%, 65%, 0.3);
			}
		}
		.storylet-error & {
			background-color: hsla(312, 72%, 65%, 0.3);
			&:nth-child(2n) {
				background-color: hsla(312, 72%, 75%, 0.3);
			}
		}
		.storylet-name, .storylet-value {
			display:inline-block;
			width:50%;
		}
	}
	.tabs {
		padding-bottom: 0.5em;
	}
	.tab {
		border-radius: 0px 0px 0.5em 0.5em;
		border-top: none;
	}
	.resizer {
		position: absolute;
		height: 3em;
		border-left: 2px solid #ccc;
		border-right: 2px solid #ccc;
		top: 10px;
		left: 4px;
		width: 8px;
		cursor: ew-resize;
	}
}

