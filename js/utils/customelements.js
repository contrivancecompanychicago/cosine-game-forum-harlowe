define([], function() {

	/*
		Custom Elements
		
		This uses the draft Web Components specification (http://www.w3.org/TR/custom-elements/)
		and the document.register() function to define new semantic HTML elements for use in Twine 2.
		
		Browsers which do not support this will create HTMLUnknownElement elements. Thus, extending the prototypes of these elements isn't currently feasible (without a polyfill).
	*/
	if (!document.registerElement) {
		return;
	}
	var CustomElements = {};
	/*
		This is technically useless at the moment - not registering a custom element that has a conformant name
		(i.e. features a hyphen anywhere after the first character) will just mean that element uses HTMLElement.prototype.
		Nevertheless, this lays ground if the polyfill route is taken, and documents the custom elements used in Harlowe.
	*/
	(function register(name) {
		var el, props = [].slice.call(arguments,1),
			proto = Object.create(HTMLElement.prototype),
			propDef = {};
		// Load up the prototype with the passed properties
		props.forEach(function(p) {
			propDef[p] = { value: null };
		});
		Object.defineProperties(proto,propDef);
		// Register the element!
		el = document.registerElement(name, { prototype: proto });
		CustomElements[name] = el;
		return register;
	} // No semicolon - chained calls follow
	
	/*
		Elements created by Twine 2's IDE
	*/
	
	// Story data (display: none)
	// - storyname: the name.
	// - startnode: a passage ID denoting which to display on startup.
	// - creator: which application created this. Metadata only.
	// - creator-version: version number of the creator application. Metadata only.
	// - options: space-separated runtime options.
	('tw-storydata', 'storyname', 'startnode', 'creator', 'creator-version', 'options') 
	('tw-passagedata', 'name', 'pid', 'position') 
	('tw-story') // Stories (block)
	
	/*
		Elements generated by Engine
	*/
	
	('tw-passage') // Passage (block)
	// Internal link to another passage (inline)
	// - passage-id: ID of the destination passage.
	// Classes:
	// .link: CSS hook for all links
	('tw-link', 'passage-id', 'passage-expr')
	// Broken link
	('tw-broken-link')
	
	// Macro instance (inline)
	// - count: Which macro instance object to refer to during Engine's render().
	// - name: Used only by debugmode.css.
	// - display: For a <<display>> macro, the name of the passage it's displaying.
	// Classes:
	// .hook-macro: is a hook macro.
	// .false-if: name is "if" but it evaluated to false.
	// .error: a problem occurred while running.
	('tw-macro', 'count', 'name') 
	('tw-sidebar') // Sidebar (block)
	('tw-icon') // Sidebar button (block)
	
	/*
		Style elements
	*/
	
	('tw-align') // Alignment (block)
	
	/*
		Structural elements
	*/
	
	// Charspans (inline)
	// - value: the char value, or 'space' or 'tab'.
	('tw-char', 'value')
	
	// Hooks (inline)
	// - name: the name of the hook.
	// Classes:
	// .link: Is a hook-link.
	('tw-hook', 'name')
	// Pseudo-hooks (inline)
	// Classes:
	// .link: Is a hook-link.
	('tw-pseudo-hook')
	('tw-transition-container')	// Transition container (inline)
	('tw-temp-container') // Temporary misc. container
	);
	
	return Object.freeze(CustomElements);
});